/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p astroprocessinterface /skylendar/builds/ubuntu/src/astroprocess.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ASTROPROCESSINTERFACE_H
#define ASTROPROCESSINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.skylendar.skyservice
 */
class OrgSkylendarSkyserviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.skylendar.skyservice"; }

public:
    OrgSkylendarSkyserviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgSkylendarSkyserviceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> ComputeEclPos(double julday, int flags)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(flags);
        return asyncCallWithArgumentList(QStringLiteral("ComputeEclPos"), argumentList);
    }

    inline QDBusPendingReply<int> ComputeGlobEclipse(double julday, int flags, bool direction, bool lunar)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(flags) << QVariant::fromValue(direction) << QVariant::fromValue(lunar);
        return asyncCallWithArgumentList(QStringLiteral("ComputeGlobEclipse"), argumentList);
    }

    inline QDBusPendingReply<int> ComputeLocEclipse(double julday, int flags, double latitude, double longitude, double altitude, bool direction)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(flags) << QVariant::fromValue(latitude) << QVariant::fromValue(longitude) << QVariant::fromValue(altitude) << QVariant::fromValue(direction);
        return asyncCallWithArgumentList(QStringLiteral("ComputeLocEclipse"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> DBusAzalt(double jd, int flags, const QByteArray &geopos, const QByteArray &xin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jd) << QVariant::fromValue(flags) << QVariant::fromValue(geopos) << QVariant::fromValue(xin);
        return asyncCallWithArgumentList(QStringLiteral("DBusAzalt"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> DBusAzaltP(double jd, int flags, const QByteArray &geopos, const QByteArray &xin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jd) << QVariant::fromValue(flags) << QVariant::fromValue(geopos) << QVariant::fromValue(xin);
        return asyncCallWithArgumentList(QStringLiteral("DBusAzaltP"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> DBusConvert(double lon, double lat, double ecl)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(lon) << QVariant::fromValue(lat) << QVariant::fromValue(ecl);
        return asyncCallWithArgumentList(QStringLiteral("DBusConvert"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> DBusGetApsides(double julday, int index, int flags, int method)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(index) << QVariant::fromValue(flags) << QVariant::fromValue(method);
        return asyncCallWithArgumentList(QStringLiteral("DBusGetApsides"), argumentList);
    }

    inline QDBusPendingReply<QString> DBusGetError()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("DBusGetError"), argumentList);
    }

    inline QDBusPendingReply<QString> DBusGetPlaName(int i)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i);
        return asyncCallWithArgumentList(QStringLiteral("DBusGetPlaName"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> DBusHeliacal(double juday, const QByteArray &geopos, int id, int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(juday) << QVariant::fromValue(geopos) << QVariant::fromValue(id) << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("DBusHeliacal"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> DBusRevJul(double jd, bool greg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jd) << QVariant::fromValue(greg);
        return asyncCallWithArgumentList(QStringLiteral("DBusRevJul"), argumentList);
    }

    inline QDBusPendingReply<double> Date_Conversion(uchar day, uchar month, short year, double utime, bool greg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(day) << QVariant::fromValue(month) << QVariant::fromValue(year) << QVariant::fromValue(utime) << QVariant::fromValue(greg);
        return asyncCallWithArgumentList(QStringLiteral("Date_Conversion"), argumentList);
    }

    inline QDBusPendingReply<int> Day_of_Week(double jd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jd);
        return asyncCallWithArgumentList(QStringLiteral("Day_of_Week"), argumentList);
    }

    inline QDBusPendingReply<double> Gauquelin(double julday, double geolat, double latitude, double longitude)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(geolat) << QVariant::fromValue(latitude) << QVariant::fromValue(longitude);
        return asyncCallWithArgumentList(QStringLiteral("Gauquelin"), argumentList);
    }

    inline QDBusPendingReply<double> GetEclipseValue(int i)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i);
        return asyncCallWithArgumentList(QStringLiteral("GetEclipseValue"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> GetHousePos(int slot)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(slot);
        return asyncCallWithArgumentList(QStringLiteral("GetHousePos"), argumentList);
    }

    inline QDBusPendingReply<double> GetMagnitude(int i)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i);
        return asyncCallWithArgumentList(QStringLiteral("GetMagnitude"), argumentList);
    }

    inline QDBusPendingReply<double> GetObliquity(double julday)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday);
        return asyncCallWithArgumentList(QStringLiteral("GetObliquity"), argumentList);
    }

    inline QDBusPendingReply<double> GetRiseSet(double julday, int index, double latitude, double longitude, double altitude, int ca)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(index) << QVariant::fromValue(latitude) << QVariant::fromValue(longitude) << QVariant::fromValue(altitude) << QVariant::fromValue(ca);
        return asyncCallWithArgumentList(QStringLiteral("GetRiseSet"), argumentList);
    }

    inline QDBusPendingReply<double> GetSunStep(double jd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jd);
        return asyncCallWithArgumentList(QStringLiteral("GetSunStep"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> GetValues(int slot)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(slot);
        return asyncCallWithArgumentList(QStringLiteral("GetValues"), argumentList);
    }

    inline QDBusPendingReply<double> GetVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetVersion"), argumentList);
    }

    inline QDBusPendingReply<bool> IfParts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("IfParts"), argumentList);
    }

    inline QDBusPendingReply<> InitRestricts(const QByteArray &art)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(art);
        return asyncCallWithArgumentList(QStringLiteral("InitRestricts"), argumentList);
    }

    inline QDBusPendingReply<> Kill()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Kill"), argumentList);
    }

    inline QDBusPendingReply<bool> LoadParts(const QByteArray &dbv, int size)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(dbv) << QVariant::fromValue(size);
        return asyncCallWithArgumentList(QStringLiteral("LoadParts"), argumentList);
    }

    inline QDBusPendingReply<double> Local2Mean(double j)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(j);
        return asyncCallWithArgumentList(QStringLiteral("Local2Mean"), argumentList);
    }

    inline QDBusPendingReply<int> LunarOccult(double julday, int i, int flags, double latitude, double longitude, double altitude, bool direction, bool local)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(julday) << QVariant::fromValue(i) << QVariant::fromValue(flags) << QVariant::fromValue(latitude) << QVariant::fromValue(longitude) << QVariant::fromValue(altitude) << QVariant::fromValue(direction) << QVariant::fromValue(local);
        return asyncCallWithArgumentList(QStringLiteral("LunarOccult"), argumentList);
    }

    inline QDBusPendingReply<bool> Recompute(const QByteArray &dct)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(dct);
        return asyncCallWithArgumentList(QStringLiteral("Recompute"), argumentList);
    }

    inline Q_NOREPLY void ScanAsp(const QByteArray &dct, double origjd, const QString &scserver, bool dual, bool mp, bool tosecond, bool ap)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(dct) << QVariant::fromValue(origjd) << QVariant::fromValue(scserver) << QVariant::fromValue(dual) << QVariant::fromValue(mp) << QVariant::fromValue(tosecond) << QVariant::fromValue(ap);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("ScanAsp"), argumentList);
    }

    inline Q_NOREPLY void ScanDir(int first, int second, const QString &scserver, uchar house, uchar dirtype, uchar statkey, double dval, int flags)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(first) << QVariant::fromValue(second) << QVariant::fromValue(scserver) << QVariant::fromValue(house) << QVariant::fromValue(dirtype) << QVariant::fromValue(statkey) << QVariant::fromValue(dval) << QVariant::fromValue(flags);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("ScanDir"), argumentList);
    }

    inline QDBusPendingReply<> SetExtraData(bool utc, const QString &swepaths, double temp, double press, uchar humid, int nbstars, const QByteArray &eit, const QByteArray &sti)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(utc) << QVariant::fromValue(swepaths) << QVariant::fromValue(temp) << QVariant::fromValue(press) << QVariant::fromValue(humid) << QVariant::fromValue(nbstars) << QVariant::fromValue(eit) << QVariant::fromValue(sti);
        return asyncCallWithArgumentList(QStringLiteral("SetExtraData"), argumentList);
    }

    inline QDBusPendingReply<> SetRestrict(const QByteArray &art, int i)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(art) << QVariant::fromValue(i);
        return asyncCallWithArgumentList(QStringLiteral("SetRestrict"), argumentList);
    }

    inline QDBusPendingReply<> SetXPoint(double angle, double lat, double dist, int ring)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(angle) << QVariant::fromValue(lat) << QVariant::fromValue(dist) << QVariant::fromValue(ring);
        return asyncCallWithArgumentList(QStringLiteral("SetXPoint"), argumentList);
    }

    inline QDBusPendingReply<double> SidTime(double jd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jd);
        return asyncCallWithArgumentList(QStringLiteral("SidTime"), argumentList);
    }

    inline Q_NOREPLY void StopScan()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("StopScan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace skylendar {
    typedef ::OrgSkylendarSkyserviceInterface skyservice;
  }
}
#endif
