/****************************************************************************
** Meta object code from reading C++ file 'astroprocessadaptor.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.5.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "astroprocessadaptor.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'astroprocessadaptor.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.5.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_SkyserviceAdaptor_t {
    QByteArrayData data[99];
    char stringdata0[9770];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_SkyserviceAdaptor_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_SkyserviceAdaptor_t qt_meta_stringdata_SkyserviceAdaptor = {
    {
QT_MOC_LITERAL(0, 0, 17), // "SkyserviceAdaptor"
QT_MOC_LITERAL(1, 18, 15), // "D-Bus Interface"
QT_MOC_LITERAL(2, 34, 24), // "org.skylendar.skyservice"
QT_MOC_LITERAL(3, 59, 19), // "D-Bus Introspection"
QT_MOC_LITERAL(4, 79, 8939), // "  <interface name=\"org.skyle..."
QT_MOC_LITERAL(5, 8024, 13), // "ComputeEclPos"
QT_MOC_LITERAL(6, 8038, 0), // ""
QT_MOC_LITERAL(7, 8039, 6), // "julday"
QT_MOC_LITERAL(8, 8046, 5), // "flags"
QT_MOC_LITERAL(9, 8052, 18), // "ComputeGlobEclipse"
QT_MOC_LITERAL(10, 8071, 9), // "direction"
QT_MOC_LITERAL(11, 8081, 5), // "lunar"
QT_MOC_LITERAL(12, 8087, 17), // "ComputeLocEclipse"
QT_MOC_LITERAL(13, 8105, 8), // "latitude"
QT_MOC_LITERAL(14, 8114, 9), // "longitude"
QT_MOC_LITERAL(15, 8124, 8), // "altitude"
QT_MOC_LITERAL(16, 8133, 9), // "DBusAzalt"
QT_MOC_LITERAL(17, 8143, 2), // "jd"
QT_MOC_LITERAL(18, 8146, 6), // "geopos"
QT_MOC_LITERAL(19, 8153, 3), // "xin"
QT_MOC_LITERAL(20, 8157, 10), // "DBusAzaltP"
QT_MOC_LITERAL(21, 8168, 11), // "DBusConvert"
QT_MOC_LITERAL(22, 8180, 3), // "lon"
QT_MOC_LITERAL(23, 8184, 3), // "lat"
QT_MOC_LITERAL(24, 8188, 3), // "ecl"
QT_MOC_LITERAL(25, 8192, 14), // "DBusGetApsides"
QT_MOC_LITERAL(26, 8207, 5), // "index"
QT_MOC_LITERAL(27, 8213, 6), // "method"
QT_MOC_LITERAL(28, 8220, 12), // "DBusGetError"
QT_MOC_LITERAL(29, 8233, 14), // "DBusGetPlaName"
QT_MOC_LITERAL(30, 8248, 1), // "i"
QT_MOC_LITERAL(31, 8250, 12), // "DBusHeliacal"
QT_MOC_LITERAL(32, 8263, 5), // "juday"
QT_MOC_LITERAL(33, 8269, 2), // "id"
QT_MOC_LITERAL(34, 8272, 4), // "type"
QT_MOC_LITERAL(35, 8277, 10), // "DBusRevJul"
QT_MOC_LITERAL(36, 8288, 4), // "greg"
QT_MOC_LITERAL(37, 8293, 15), // "Date_Conversion"
QT_MOC_LITERAL(38, 8309, 3), // "day"
QT_MOC_LITERAL(39, 8313, 5), // "month"
QT_MOC_LITERAL(40, 8319, 4), // "year"
QT_MOC_LITERAL(41, 8324, 5), // "utime"
QT_MOC_LITERAL(42, 8330, 11), // "Day_of_Week"
QT_MOC_LITERAL(43, 8342, 9), // "Gauquelin"
QT_MOC_LITERAL(44, 8352, 6), // "geolat"
QT_MOC_LITERAL(45, 8359, 15), // "GetEclipseValue"
QT_MOC_LITERAL(46, 8375, 11), // "GetHousePos"
QT_MOC_LITERAL(47, 8387, 4), // "slot"
QT_MOC_LITERAL(48, 8392, 12), // "GetMagnitude"
QT_MOC_LITERAL(49, 8405, 12), // "GetObliquity"
QT_MOC_LITERAL(50, 8418, 10), // "GetRiseSet"
QT_MOC_LITERAL(51, 8429, 2), // "ca"
QT_MOC_LITERAL(52, 8432, 10), // "GetSunStep"
QT_MOC_LITERAL(53, 8443, 9), // "GetValues"
QT_MOC_LITERAL(54, 8453, 10), // "GetVersion"
QT_MOC_LITERAL(55, 8464, 7), // "IfParts"
QT_MOC_LITERAL(56, 8472, 13), // "InitRestricts"
QT_MOC_LITERAL(57, 8486, 3), // "art"
QT_MOC_LITERAL(58, 8490, 4), // "Kill"
QT_MOC_LITERAL(59, 8495, 9), // "LoadParts"
QT_MOC_LITERAL(60, 8505, 3), // "dbv"
QT_MOC_LITERAL(61, 8509, 4), // "size"
QT_MOC_LITERAL(62, 8514, 10), // "Local2Mean"
QT_MOC_LITERAL(63, 8525, 1), // "j"
QT_MOC_LITERAL(64, 8527, 11), // "LunarOccult"
QT_MOC_LITERAL(65, 8539, 5), // "local"
QT_MOC_LITERAL(66, 8545, 9), // "Recompute"
QT_MOC_LITERAL(67, 8555, 3), // "dct"
QT_MOC_LITERAL(68, 8559, 7), // "ScanAsp"
QT_MOC_LITERAL(69, 8567, 9), // "Q_NOREPLY"
QT_MOC_LITERAL(70, 8577, 6), // "origjd"
QT_MOC_LITERAL(71, 8584, 8), // "scserver"
QT_MOC_LITERAL(72, 8593, 4), // "dual"
QT_MOC_LITERAL(73, 8598, 2), // "mp"
QT_MOC_LITERAL(74, 8601, 8), // "tosecond"
QT_MOC_LITERAL(75, 8610, 2), // "ap"
QT_MOC_LITERAL(76, 8613, 7), // "ScanDir"
QT_MOC_LITERAL(77, 8621, 5), // "first"
QT_MOC_LITERAL(78, 8627, 6), // "second"
QT_MOC_LITERAL(79, 8634, 5), // "house"
QT_MOC_LITERAL(80, 8640, 7), // "dirtype"
QT_MOC_LITERAL(81, 8648, 7), // "statkey"
QT_MOC_LITERAL(82, 8656, 4), // "dval"
QT_MOC_LITERAL(83, 8661, 12), // "SetExtraData"
QT_MOC_LITERAL(84, 8674, 3), // "utc"
QT_MOC_LITERAL(85, 8678, 8), // "swepaths"
QT_MOC_LITERAL(86, 8687, 4), // "temp"
QT_MOC_LITERAL(87, 8692, 5), // "press"
QT_MOC_LITERAL(88, 8698, 5), // "humid"
QT_MOC_LITERAL(89, 8704, 7), // "nbstars"
QT_MOC_LITERAL(90, 8712, 3), // "eit"
QT_MOC_LITERAL(91, 8716, 3), // "sti"
QT_MOC_LITERAL(92, 8720, 11), // "SetRestrict"
QT_MOC_LITERAL(93, 8732, 9), // "SetXPoint"
QT_MOC_LITERAL(94, 8742, 5), // "angle"
QT_MOC_LITERAL(95, 8748, 4), // "dist"
QT_MOC_LITERAL(96, 8753, 4), // "ring"
QT_MOC_LITERAL(97, 8758, 7), // "SidTime"
QT_MOC_LITERAL(98, 8766, 8) // "StopScan"

    },
    "SkyserviceAdaptor\0D-Bus Interface\0"
    "org.skylendar.skyservice\0D-Bus Introspection\0"
    "  <interface name=\"org.skylendar.skyservice\">\n    <method name=\"Ge"
    "tVersion\">\n      <arg direction=\"out\" type=\"d\"/>\n    </method>\n"
    "    <method name=\"SetExtraData\">\n      <arg direction=\"in\" type=\""
    "b\" name=\"utc\"/>\n      <arg direction=\"in\" type=\"s\" name=\"swep"
    "aths\"/>\n      <arg direction=\"in\" type=\"d\" name=\"temp\"/>\n    "
    "  <arg direction=\"in\" type=\"d\" name=\"press\"/>\n      <arg direct"
    "ion=\"in\" type=\"y\" name=\"humid\"/>\n      <arg direction=\"in\" ty"
    "pe=\"i\" name=\"nbstars\"/>\n      <arg direction=\"in\" type=\"ay\" n"
    "ame=\"eit\"/>\n      <arg direction=\"in\" type=\"ay\" name=\"sti\"/>\n"
    "    </method>\n    <method name=\"Date_Conversion\">\n      <arg direc"
    "tion=\"out\" type=\"d\"/>\n      <arg direction=\"in\" type=\"y\" name"
    "=\"day\"/>\n      <arg direction=\"in\" type=\"y\" name=\"month\"/>\n "
    "     <arg direction=\"in\" type=\"n\" name=\"year\"/>\n      <arg dire"
    "ction=\"in\" type=\"d\" name=\"utime\"/>\n      <arg direction=\"in\" "
    "type=\"b\" name=\"greg\"/>\n    </method>\n    <method name=\"Local2Me"
    "an\">\n      <arg direction=\"out\" type=\"d\"/>\n      <arg direction"
    "=\"in\" type=\"d\" name=\"j\"/>\n    </method>\n    <method name=\"Get"
    "Obliquity\">\n      <arg direction=\"out\" type=\"d\"/>\n      <arg di"
    "rection=\"in\" type=\"d\" name=\"julday\"/>\n    </method>\n    <metho"
    "d name=\"DBusRevJul\">\n      <arg direction=\"out\" type=\"ay\"/>\n  "
    "    <arg direction=\"in\" type=\"d\" name=\"jd\"/>\n      <arg directi"
    "on=\"in\" type=\"b\" name=\"greg\"/>\n    </method>\n    <method name="
    "\"DBusAzalt\">\n      <arg direction=\"out\" type=\"ay\"/>\n      <arg"
    " direction=\"in\" type=\"d\" name=\"jd\"/>\n      <arg direction=\"in\""
    " type=\"i\" name=\"flags\"/>\n      <arg direction=\"in\" type=\"ay\" "
    "name=\"geopos\"/>\n      <arg direction=\"in\" type=\"ay\" name=\"xin\""
    "/>\n    </method>\n    <method name=\"DBusAzaltP\">\n      <arg direct"
    "ion=\"out\" type=\"ay\"/>\n      <arg direction=\"in\" type=\"d\" name"
    "=\"jd\"/>\n      <arg direction=\"in\" type=\"i\" name=\"flags\"/>\n  "
    "    <arg direction=\"in\" type=\"ay\" name=\"geopos\"/>\n      <arg di"
    "rection=\"in\" type=\"ay\" name=\"xin\"/>\n    </method>\n    <method "
    "name=\"DBusConvert\">\n      <arg direction=\"out\" type=\"ay\"/>\n   "
    "   <arg direction=\"in\" type=\"d\" name=\"lon\"/>\n      <arg directi"
    "on=\"in\" type=\"d\" name=\"lat\"/>\n      <arg direction=\"in\" type="
    "\"d\" name=\"ecl\"/>\n    </method>\n    <method name=\"DBusGetPlaName"
    "\">\n      <arg direction=\"out\" type=\"s\"/>\n      <arg direction=\""
    "in\" type=\"i\" name=\"i\"/>\n    </method>\n    <method name=\"GetMag"
    "nitude\">\n      <arg direction=\"out\" type=\"d\"/>\n      <arg direc"
    "tion=\"in\" type=\"i\" name=\"i\"/>\n    </method>\n    <method name=\""
    "SidTime\">\n      <arg direction=\"out\" type=\"d\"/>\n      <arg dire"
    "ction=\"in\" type=\"d\" name=\"jd\"/>\n    </method>\n    <method name"
    "=\"Day_of_Week\">\n      <arg direction=\"out\" type=\"i\"/>\n      <a"
    "rg direction=\"in\" type=\"d\" name=\"jd\"/>\n    </method>\n    <meth"
    "od name=\"InitRestricts\">\n      <arg direction=\"in\" type=\"ay\" na"
    "me=\"art\"/>\n    </method>\n    <method name=\"SetRestrict\">\n      "
    "<arg direction=\"in\" type=\"ay\" name=\"art\"/>\n      <arg direction"
    "=\"in\" type=\"i\" name=\"i\"/>\n    </method>\n    <method name=\"Set"
    "XPoint\">\n      <arg direction=\"in\" type=\"d\" name=\"angle\"/>\n  "
    "    <arg direction=\"in\" type=\"d\" name=\"lat\"/>\n      <arg direct"
    "ion=\"in\" type=\"d\" name=\"dist\"/>\n      <arg direction=\"in\" typ"
    "e=\"i\" name=\"ring\"/>\n    </method>\n    <method name=\"Recompute\""
    ">\n      <arg direction=\"out\" type=\"b\"/>\n      <arg direction=\"i"
    "n\" type=\"ay\" name=\"dct\"/>\n    </method>\n    <method name=\"GetV"
    "alues\">\n      <arg direction=\"out\" type=\"ay\"/>\n      <arg direc"
    "tion=\"in\" type=\"i\" name=\"slot\"/>\n    </method>\n    <method nam"
    "e=\"DBusGetError\">\n      <arg direction=\"out\" type=\"s\"/>\n    </"
    "method>\n    <method name=\"Kill\"/>\n    <method name=\"ScanAsp\">\n "
    "     <arg direction=\"in\" type=\"ay\" name=\"dct\"/>\n      <arg dire"
    "ction=\"in\" type=\"d\" name=\"origjd\"/>\n      <arg direction=\"in\""
    " type=\"s\" name=\"scserver\"/>\n      <arg direction=\"in\" type=\"b\""
    " name=\"dual\"/>\n      <arg direction=\"in\" type=\"b\" name=\"mp\"/>"
    "\n      <arg direction=\"in\" type=\"b\" name=\"tosecond\"/>\n      <a"
    "rg direction=\"in\" type=\"b\" name=\"ap\"/>\n      <annotation value="
    "\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n    </method>"
    "\n    <method name=\"ScanDir\">\n      <arg direction=\"in\" type=\"i\""
    " name=\"first\"/>\n      <arg direction=\"in\" type=\"i\" name=\"secon"
    "d\"/>\n      <arg direction=\"in\" type=\"s\" name=\"scserver\"/>\n   "
    "   <arg direction=\"in\" type=\"y\" name=\"house\"/>\n      <arg direc"
    "tion=\"in\" type=\"y\" name=\"dirtype\"/>\n      <arg direction=\"in\""
    " type=\"y\" name=\"statkey\"/>\n      <arg direction=\"in\" type=\"d\""
    " name=\"dval\"/>\n      <arg direction=\"in\" type=\"i\" name=\"flags\""
    "/>\n      <annotation value=\"true\" name=\"org.freedesktop.DBus.Metho"
    "d.NoReply\"/>\n    </method>\n    <method name=\"StopScan\">\n      <a"
    "nnotation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/"
    ">\n    </method>\n    <method name=\"GetRiseSet\">\n      <arg directi"
    "on=\"out\" type=\"d\"/>\n      <arg direction=\"in\" type=\"d\" name=\""
    "julday\"/>\n      <arg direction=\"in\" type=\"i\" name=\"index\"/>\n "
    "     <arg direction=\"in\" type=\"d\" name=\"latitude\"/>\n      <arg "
    "direction=\"in\" type=\"d\" name=\"longitude\"/>\n      <arg direction"
    "=\"in\" type=\"d\" name=\"altitude\"/>\n      <arg direction=\"in\" ty"
    "pe=\"i\" name=\"ca\"/>\n    </method>\n    <method name=\"ComputeGlobE"
    "clipse\">\n      <arg direction=\"out\" type=\"i\"/>\n      <arg direc"
    "tion=\"in\" type=\"d\" name=\"julday\"/>\n      <arg direction=\"in\" "
    "type=\"i\" name=\"flags\"/>\n      <arg direction=\"in\" type=\"b\" na"
    "me=\"direction\"/>\n      <arg direction=\"in\" type=\"b\" name=\"luna"
    "r\"/>\n    </method>\n    <method name=\"ComputeLocEclipse\">\n      <"
    "arg direction=\"out\" type=\"i\"/>\n      <arg direction=\"in\" type=\""
    "d\" name=\"julday\"/>\n      <arg direction=\"in\" type=\"i\" name=\"f"
    "lags\"/>\n      <arg direction=\"in\" type=\"d\" name=\"latitude\"/>\n"
    "      <arg direction=\"in\" type=\"d\" name=\"longitude\"/>\n      <ar"
    "g direction=\"in\" type=\"d\" name=\"altitude\"/>\n      <arg directio"
    "n=\"in\" type=\"b\" name=\"direction\"/>\n    </method>\n    <method n"
    "ame=\"ComputeEclPos\">\n      <arg direction=\"out\" type=\"i\"/>\n   "
    "   <arg direction=\"in\" type=\"d\" name=\"julday\"/>\n      <arg dire"
    "ction=\"in\" type=\"i\" name=\"flags\"/>\n    </method>\n    <method n"
    "ame=\"LunarOccult\">\n      <arg direction=\"out\" type=\"i\"/>\n     "
    " <arg direction=\"in\" type=\"d\" name=\"julday\"/>\n      <arg direct"
    "ion=\"in\" type=\"i\" name=\"i\"/>\n      <arg direction=\"in\" type=\""
    "i\" name=\"flags\"/>\n      <arg direction=\"in\" type=\"d\" name=\"la"
    "titude\"/>\n      <arg direction=\"in\" type=\"d\" name=\"longitude\"/"
    ">\n      <arg direction=\"in\" type=\"d\" name=\"altitude\"/>\n      <"
    "arg direction=\"in\" type=\"b\" name=\"direction\"/>\n      <arg direc"
    "tion=\"in\" type=\"b\" name=\"local\"/>\n    </method>\n    <method na"
    "me=\"GetEclipseValue\">\n      <arg direction=\"out\" type=\"d\"/>\n  "
    "    <arg direction=\"in\" type=\"i\" name=\"i\"/>\n    </method>\n    "
    "<method name=\"DBusGetApsides\">\n      <arg direction=\"out\" type=\""
    "ay\"/>\n      <arg direction=\"in\" type=\"d\" name=\"julday\"/>\n    "
    "  <arg direction=\"in\" type=\"i\" name=\"index\"/>\n      <arg direct"
    "ion=\"in\" type=\"i\" name=\"flags\"/>\n      <arg direction=\"in\" ty"
    "pe=\"i\" name=\"method\"/>\n    </method>\n    <method name=\"GetSunSt"
    "ep\">\n      <arg direction=\"out\" type=\"d\"/>\n      <arg direction"
    "=\"in\" type=\"d\" name=\"jd\"/>\n    </method>\n    <method name=\"If"
    "Parts\">\n      <arg direction=\"out\" type=\"b\"/>\n    </method>\n  "
    "  <method name=\"LoadParts\">\n      <arg direction=\"out\" type=\"b\""
    "/>\n      <arg direction=\"in\" type=\"ay\" name=\"dbv\"/>\n      <arg"
    " direction=\"in\" type=\"i\" name=\"size\"/>\n    </method>\n    <meth"
    "od name=\"Gauquelin\">\n      <arg direction=\"out\" type=\"d\"/>\n   "
    "   <arg direction=\"in\" type=\"d\" name=\"julday\"/>\n      <arg dire"
    "ction=\"in\" type=\"d\" name=\"geolat\"/>\n      <arg direction=\"in\""
    " type=\"d\" name=\"latitude\"/>\n      <arg direction=\"in\" type=\"d\""
    " name=\"longitude\"/>\n    </method>\n    <method name=\"GetHousePos\""
    ">\n      <arg direction=\"out\" type=\"ay\"/>\n      <arg direction=\""
    "in\" type=\"i\" name=\"slot\"/>\n    </method>\n    <method name=\"DBu"
    "sHeliacal\">\n      <arg direction=\"out\" type=\"ay\"/>\n      <arg d"
    "irection=\"in\" type=\"d\" name=\"juday\"/>\n      <arg direction=\"in"
    "\" type=\"ay\" name=\"geopos\"/>\n      <arg direction=\"in\" type=\"i"
    "\" name=\"id\"/>\n      <arg direction=\"in\" type=\"i\" name=\"type\""
    "/>\n    </method>\n  </interface>\n\0"
    "ComputeEclPos\0\0julday\0flags\0"
    "ComputeGlobEclipse\0direction\0lunar\0"
    "ComputeLocEclipse\0latitude\0longitude\0"
    "altitude\0DBusAzalt\0jd\0geopos\0xin\0"
    "DBusAzaltP\0DBusConvert\0lon\0lat\0ecl\0"
    "DBusGetApsides\0index\0method\0DBusGetError\0"
    "DBusGetPlaName\0i\0DBusHeliacal\0juday\0"
    "id\0type\0DBusRevJul\0greg\0Date_Conversion\0"
    "day\0month\0year\0utime\0Day_of_Week\0"
    "Gauquelin\0geolat\0GetEclipseValue\0"
    "GetHousePos\0slot\0GetMagnitude\0"
    "GetObliquity\0GetRiseSet\0ca\0GetSunStep\0"
    "GetValues\0GetVersion\0IfParts\0InitRestricts\0"
    "art\0Kill\0LoadParts\0dbv\0size\0Local2Mean\0"
    "j\0LunarOccult\0local\0Recompute\0dct\0"
    "ScanAsp\0Q_NOREPLY\0origjd\0scserver\0"
    "dual\0mp\0tosecond\0ap\0ScanDir\0first\0"
    "second\0house\0dirtype\0statkey\0dval\0"
    "SetExtraData\0utc\0swepaths\0temp\0press\0"
    "humid\0nbstars\0eit\0sti\0SetRestrict\0"
    "SetXPoint\0angle\0dist\0ring\0SidTime\0"
    "StopScan"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_SkyserviceAdaptor[] = {

 // content:
       7,       // revision
       0,       // classname
       2,   14, // classinfo
      36,   18, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // classinfo: key, value
       1,    2,
       3,    4,

 // slots: name, argc, parameters, tag, flags
       5,    2,  198,    6, 0x0a /* Public */,
       9,    4,  203,    6, 0x0a /* Public */,
      12,    6,  212,    6, 0x0a /* Public */,
      16,    4,  225,    6, 0x0a /* Public */,
      20,    4,  234,    6, 0x0a /* Public */,
      21,    3,  243,    6, 0x0a /* Public */,
      25,    4,  250,    6, 0x0a /* Public */,
      28,    0,  259,    6, 0x0a /* Public */,
      29,    1,  260,    6, 0x0a /* Public */,
      31,    4,  263,    6, 0x0a /* Public */,
      35,    2,  272,    6, 0x0a /* Public */,
      37,    5,  277,    6, 0x0a /* Public */,
      42,    1,  288,    6, 0x0a /* Public */,
      43,    4,  291,    6, 0x0a /* Public */,
      45,    1,  300,    6, 0x0a /* Public */,
      46,    1,  303,    6, 0x0a /* Public */,
      48,    1,  306,    6, 0x0a /* Public */,
      49,    1,  309,    6, 0x0a /* Public */,
      50,    6,  312,    6, 0x0a /* Public */,
      52,    1,  325,    6, 0x0a /* Public */,
      53,    1,  328,    6, 0x0a /* Public */,
      54,    0,  331,    6, 0x0a /* Public */,
      55,    0,  332,    6, 0x0a /* Public */,
      56,    1,  333,    6, 0x0a /* Public */,
      58,    0,  336,    6, 0x0a /* Public */,
      59,    2,  337,    6, 0x0a /* Public */,
      62,    1,  342,    6, 0x0a /* Public */,
      64,    8,  345,    6, 0x0a /* Public */,
      66,    1,  362,    6, 0x0a /* Public */,
      68,    7,  365,   69, 0x0a /* Public */,
      76,    8,  380,   69, 0x0a /* Public */,
      83,    8,  397,    6, 0x0a /* Public */,
      92,    2,  414,    6, 0x0a /* Public */,
      93,    4,  419,    6, 0x0a /* Public */,
      97,    1,  428,    6, 0x0a /* Public */,
      98,    0,  431,   69, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Int, QMetaType::Double, QMetaType::Int,    7,    8,
    QMetaType::Int, QMetaType::Double, QMetaType::Int, QMetaType::Bool, QMetaType::Bool,    7,    8,   10,   11,
    QMetaType::Int, QMetaType::Double, QMetaType::Int, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Bool,    7,    8,   13,   14,   15,   10,
    QMetaType::QByteArray, QMetaType::Double, QMetaType::Int, QMetaType::QByteArray, QMetaType::QByteArray,   17,    8,   18,   19,
    QMetaType::QByteArray, QMetaType::Double, QMetaType::Int, QMetaType::QByteArray, QMetaType::QByteArray,   17,    8,   18,   19,
    QMetaType::QByteArray, QMetaType::Double, QMetaType::Double, QMetaType::Double,   22,   23,   24,
    QMetaType::QByteArray, QMetaType::Double, QMetaType::Int, QMetaType::Int, QMetaType::Int,    7,   26,    8,   27,
    QMetaType::QString,
    QMetaType::QString, QMetaType::Int,   30,
    QMetaType::QByteArray, QMetaType::Double, QMetaType::QByteArray, QMetaType::Int, QMetaType::Int,   32,   18,   33,   34,
    QMetaType::QByteArray, QMetaType::Double, QMetaType::Bool,   17,   36,
    QMetaType::Double, QMetaType::UChar, QMetaType::UChar, QMetaType::Short, QMetaType::Double, QMetaType::Bool,   38,   39,   40,   41,   36,
    QMetaType::Int, QMetaType::Double,   17,
    QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Double,    7,   44,   13,   14,
    QMetaType::Double, QMetaType::Int,   30,
    QMetaType::QByteArray, QMetaType::Int,   47,
    QMetaType::Double, QMetaType::Int,   30,
    QMetaType::Double, QMetaType::Double,    7,
    QMetaType::Double, QMetaType::Double, QMetaType::Int, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Int,    7,   26,   13,   14,   15,   51,
    QMetaType::Double, QMetaType::Double,   17,
    QMetaType::QByteArray, QMetaType::Int,   47,
    QMetaType::Double,
    QMetaType::Bool,
    QMetaType::Void, QMetaType::QByteArray,   57,
    QMetaType::Void,
    QMetaType::Bool, QMetaType::QByteArray, QMetaType::Int,   60,   61,
    QMetaType::Double, QMetaType::Double,   63,
    QMetaType::Int, QMetaType::Double, QMetaType::Int, QMetaType::Int, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Bool, QMetaType::Bool,    7,   30,    8,   13,   14,   15,   10,   65,
    QMetaType::Bool, QMetaType::QByteArray,   67,
    QMetaType::Void, QMetaType::QByteArray, QMetaType::Double, QMetaType::QString, QMetaType::Bool, QMetaType::Bool, QMetaType::Bool, QMetaType::Bool,   67,   70,   71,   72,   73,   74,   75,
    QMetaType::Void, QMetaType::Int, QMetaType::Int, QMetaType::QString, QMetaType::UChar, QMetaType::UChar, QMetaType::UChar, QMetaType::Double, QMetaType::Int,   77,   78,   71,   79,   80,   81,   82,    8,
    QMetaType::Void, QMetaType::Bool, QMetaType::QString, QMetaType::Double, QMetaType::Double, QMetaType::UChar, QMetaType::Int, QMetaType::QByteArray, QMetaType::QByteArray,   84,   85,   86,   87,   88,   89,   90,   91,
    QMetaType::Void, QMetaType::QByteArray, QMetaType::Int,   57,   30,
    QMetaType::Void, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Int,   94,   23,   95,   96,
    QMetaType::Double, QMetaType::Double,   17,
    QMetaType::Void,

       0        // eod
};

void SkyserviceAdaptor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        SkyserviceAdaptor *_t = static_cast<SkyserviceAdaptor *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: { int _r = _t->ComputeEclPos((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = _r; }  break;
        case 1: { int _r = _t->ComputeGlobEclipse((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< bool(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = _r; }  break;
        case 2: { int _r = _t->ComputeLocEclipse((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< double(*)>(_a[5])),(*reinterpret_cast< bool(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = _r; }  break;
        case 3: { QByteArray _r = _t->DBusAzalt((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QByteArray(*)>(_a[3])),(*reinterpret_cast< const QByteArray(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 4: { QByteArray _r = _t->DBusAzaltP((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QByteArray(*)>(_a[3])),(*reinterpret_cast< const QByteArray(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 5: { QByteArray _r = _t->DBusConvert((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 6: { QByteArray _r = _t->DBusGetApsides((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 7: { QString _r = _t->DBusGetError();
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = _r; }  break;
        case 8: { QString _r = _t->DBusGetPlaName((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = _r; }  break;
        case 9: { QByteArray _r = _t->DBusHeliacal((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< const QByteArray(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 10: { QByteArray _r = _t->DBusRevJul((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 11: { double _r = _t->Date_Conversion((*reinterpret_cast< uchar(*)>(_a[1])),(*reinterpret_cast< uchar(*)>(_a[2])),(*reinterpret_cast< short(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< bool(*)>(_a[5])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 12: { int _r = _t->Day_of_Week((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = _r; }  break;
        case 13: { double _r = _t->Gauquelin((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 14: { double _r = _t->GetEclipseValue((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 15: { QByteArray _r = _t->GetHousePos((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 16: { double _r = _t->GetMagnitude((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 17: { double _r = _t->GetObliquity((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 18: { double _r = _t->GetRiseSet((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< double(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 19: { double _r = _t->GetSunStep((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 20: { QByteArray _r = _t->GetValues((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QByteArray*>(_a[0]) = _r; }  break;
        case 21: { double _r = _t->GetVersion();
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 22: { bool _r = _t->IfParts();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = _r; }  break;
        case 23: _t->InitRestricts((*reinterpret_cast< const QByteArray(*)>(_a[1]))); break;
        case 24: _t->Kill(); break;
        case 25: { bool _r = _t->LoadParts((*reinterpret_cast< const QByteArray(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = _r; }  break;
        case 26: { double _r = _t->Local2Mean((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 27: { int _r = _t->LunarOccult((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< double(*)>(_a[5])),(*reinterpret_cast< double(*)>(_a[6])),(*reinterpret_cast< bool(*)>(_a[7])),(*reinterpret_cast< bool(*)>(_a[8])));
            if (_a[0]) *reinterpret_cast< int*>(_a[0]) = _r; }  break;
        case 28: { bool _r = _t->Recompute((*reinterpret_cast< const QByteArray(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = _r; }  break;
        case 29: _t->ScanAsp((*reinterpret_cast< const QByteArray(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< bool(*)>(_a[5])),(*reinterpret_cast< bool(*)>(_a[6])),(*reinterpret_cast< bool(*)>(_a[7]))); break;
        case 30: _t->ScanDir((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< uchar(*)>(_a[4])),(*reinterpret_cast< uchar(*)>(_a[5])),(*reinterpret_cast< uchar(*)>(_a[6])),(*reinterpret_cast< double(*)>(_a[7])),(*reinterpret_cast< int(*)>(_a[8]))); break;
        case 31: _t->SetExtraData((*reinterpret_cast< bool(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< uchar(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< const QByteArray(*)>(_a[7])),(*reinterpret_cast< const QByteArray(*)>(_a[8]))); break;
        case 32: _t->SetRestrict((*reinterpret_cast< const QByteArray(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2]))); break;
        case 33: _t->SetXPoint((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4]))); break;
        case 34: { double _r = _t->SidTime((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = _r; }  break;
        case 35: _t->StopScan(); break;
        default: ;
        }
    }
}

const QMetaObject SkyserviceAdaptor::staticMetaObject = {
    { &QDBusAbstractAdaptor::staticMetaObject, qt_meta_stringdata_SkyserviceAdaptor.data,
      qt_meta_data_SkyserviceAdaptor,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *SkyserviceAdaptor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SkyserviceAdaptor::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_SkyserviceAdaptor.stringdata0))
        return static_cast<void*>(const_cast< SkyserviceAdaptor*>(this));
    return QDBusAbstractAdaptor::qt_metacast(_clname);
}

int SkyserviceAdaptor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractAdaptor::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 36)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 36;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 36)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 36;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
