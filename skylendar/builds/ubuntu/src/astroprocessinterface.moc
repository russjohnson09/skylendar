/****************************************************************************
** Meta object code from reading C++ file 'astroprocessinterface.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.5.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "astroprocessinterface.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'astroprocessinterface.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.5.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_OrgSkylendarSkyserviceInterface_t {
    QByteArrayData data[101];
    char stringdata0[933];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_OrgSkylendarSkyserviceInterface_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_OrgSkylendarSkyserviceInterface_t qt_meta_stringdata_OrgSkylendarSkyserviceInterface = {
    {
QT_MOC_LITERAL(0, 0, 31), // "OrgSkylendarSkyserviceInterface"
QT_MOC_LITERAL(1, 32, 13), // "ComputeEclPos"
QT_MOC_LITERAL(2, 46, 22), // "QDBusPendingReply<int>"
QT_MOC_LITERAL(3, 69, 0), // ""
QT_MOC_LITERAL(4, 70, 6), // "julday"
QT_MOC_LITERAL(5, 77, 5), // "flags"
QT_MOC_LITERAL(6, 83, 18), // "ComputeGlobEclipse"
QT_MOC_LITERAL(7, 102, 9), // "direction"
QT_MOC_LITERAL(8, 112, 5), // "lunar"
QT_MOC_LITERAL(9, 118, 17), // "ComputeLocEclipse"
QT_MOC_LITERAL(10, 136, 8), // "latitude"
QT_MOC_LITERAL(11, 145, 9), // "longitude"
QT_MOC_LITERAL(12, 155, 8), // "altitude"
QT_MOC_LITERAL(13, 164, 9), // "DBusAzalt"
QT_MOC_LITERAL(14, 174, 29), // "QDBusPendingReply<QByteArray>"
QT_MOC_LITERAL(15, 204, 2), // "jd"
QT_MOC_LITERAL(16, 207, 6), // "geopos"
QT_MOC_LITERAL(17, 214, 3), // "xin"
QT_MOC_LITERAL(18, 218, 10), // "DBusAzaltP"
QT_MOC_LITERAL(19, 229, 11), // "DBusConvert"
QT_MOC_LITERAL(20, 241, 3), // "lon"
QT_MOC_LITERAL(21, 245, 3), // "lat"
QT_MOC_LITERAL(22, 249, 3), // "ecl"
QT_MOC_LITERAL(23, 253, 14), // "DBusGetApsides"
QT_MOC_LITERAL(24, 268, 5), // "index"
QT_MOC_LITERAL(25, 274, 6), // "method"
QT_MOC_LITERAL(26, 281, 12), // "DBusGetError"
QT_MOC_LITERAL(27, 294, 26), // "QDBusPendingReply<QString>"
QT_MOC_LITERAL(28, 321, 14), // "DBusGetPlaName"
QT_MOC_LITERAL(29, 336, 1), // "i"
QT_MOC_LITERAL(30, 338, 12), // "DBusHeliacal"
QT_MOC_LITERAL(31, 351, 5), // "juday"
QT_MOC_LITERAL(32, 357, 2), // "id"
QT_MOC_LITERAL(33, 360, 4), // "type"
QT_MOC_LITERAL(34, 365, 10), // "DBusRevJul"
QT_MOC_LITERAL(35, 376, 4), // "greg"
QT_MOC_LITERAL(36, 381, 15), // "Date_Conversion"
QT_MOC_LITERAL(37, 397, 25), // "QDBusPendingReply<double>"
QT_MOC_LITERAL(38, 423, 3), // "day"
QT_MOC_LITERAL(39, 427, 5), // "month"
QT_MOC_LITERAL(40, 433, 4), // "year"
QT_MOC_LITERAL(41, 438, 5), // "utime"
QT_MOC_LITERAL(42, 444, 11), // "Day_of_Week"
QT_MOC_LITERAL(43, 456, 9), // "Gauquelin"
QT_MOC_LITERAL(44, 466, 6), // "geolat"
QT_MOC_LITERAL(45, 473, 15), // "GetEclipseValue"
QT_MOC_LITERAL(46, 489, 11), // "GetHousePos"
QT_MOC_LITERAL(47, 501, 4), // "slot"
QT_MOC_LITERAL(48, 506, 12), // "GetMagnitude"
QT_MOC_LITERAL(49, 519, 12), // "GetObliquity"
QT_MOC_LITERAL(50, 532, 10), // "GetRiseSet"
QT_MOC_LITERAL(51, 543, 2), // "ca"
QT_MOC_LITERAL(52, 546, 10), // "GetSunStep"
QT_MOC_LITERAL(53, 557, 9), // "GetValues"
QT_MOC_LITERAL(54, 567, 10), // "GetVersion"
QT_MOC_LITERAL(55, 578, 7), // "IfParts"
QT_MOC_LITERAL(56, 586, 23), // "QDBusPendingReply<bool>"
QT_MOC_LITERAL(57, 610, 13), // "InitRestricts"
QT_MOC_LITERAL(58, 624, 19), // "QDBusPendingReply<>"
QT_MOC_LITERAL(59, 644, 3), // "art"
QT_MOC_LITERAL(60, 648, 4), // "Kill"
QT_MOC_LITERAL(61, 653, 9), // "LoadParts"
QT_MOC_LITERAL(62, 663, 3), // "dbv"
QT_MOC_LITERAL(63, 667, 4), // "size"
QT_MOC_LITERAL(64, 672, 10), // "Local2Mean"
QT_MOC_LITERAL(65, 683, 1), // "j"
QT_MOC_LITERAL(66, 685, 11), // "LunarOccult"
QT_MOC_LITERAL(67, 697, 5), // "local"
QT_MOC_LITERAL(68, 703, 9), // "Recompute"
QT_MOC_LITERAL(69, 713, 3), // "dct"
QT_MOC_LITERAL(70, 717, 7), // "ScanAsp"
QT_MOC_LITERAL(71, 725, 9), // "Q_NOREPLY"
QT_MOC_LITERAL(72, 735, 6), // "origjd"
QT_MOC_LITERAL(73, 742, 8), // "scserver"
QT_MOC_LITERAL(74, 751, 4), // "dual"
QT_MOC_LITERAL(75, 756, 2), // "mp"
QT_MOC_LITERAL(76, 759, 8), // "tosecond"
QT_MOC_LITERAL(77, 768, 2), // "ap"
QT_MOC_LITERAL(78, 771, 7), // "ScanDir"
QT_MOC_LITERAL(79, 779, 5), // "first"
QT_MOC_LITERAL(80, 785, 6), // "second"
QT_MOC_LITERAL(81, 792, 5), // "house"
QT_MOC_LITERAL(82, 798, 7), // "dirtype"
QT_MOC_LITERAL(83, 806, 7), // "statkey"
QT_MOC_LITERAL(84, 814, 4), // "dval"
QT_MOC_LITERAL(85, 819, 12), // "SetExtraData"
QT_MOC_LITERAL(86, 832, 3), // "utc"
QT_MOC_LITERAL(87, 836, 8), // "swepaths"
QT_MOC_LITERAL(88, 845, 4), // "temp"
QT_MOC_LITERAL(89, 850, 5), // "press"
QT_MOC_LITERAL(90, 856, 5), // "humid"
QT_MOC_LITERAL(91, 862, 7), // "nbstars"
QT_MOC_LITERAL(92, 870, 3), // "eit"
QT_MOC_LITERAL(93, 874, 3), // "sti"
QT_MOC_LITERAL(94, 878, 11), // "SetRestrict"
QT_MOC_LITERAL(95, 890, 9), // "SetXPoint"
QT_MOC_LITERAL(96, 900, 5), // "angle"
QT_MOC_LITERAL(97, 906, 4), // "dist"
QT_MOC_LITERAL(98, 911, 4), // "ring"
QT_MOC_LITERAL(99, 916, 7), // "SidTime"
QT_MOC_LITERAL(100, 924, 8) // "StopScan"

    },
    "OrgSkylendarSkyserviceInterface\0"
    "ComputeEclPos\0QDBusPendingReply<int>\0"
    "\0julday\0flags\0ComputeGlobEclipse\0"
    "direction\0lunar\0ComputeLocEclipse\0"
    "latitude\0longitude\0altitude\0DBusAzalt\0"
    "QDBusPendingReply<QByteArray>\0jd\0"
    "geopos\0xin\0DBusAzaltP\0DBusConvert\0lon\0"
    "lat\0ecl\0DBusGetApsides\0index\0method\0"
    "DBusGetError\0QDBusPendingReply<QString>\0"
    "DBusGetPlaName\0i\0DBusHeliacal\0juday\0"
    "id\0type\0DBusRevJul\0greg\0Date_Conversion\0"
    "QDBusPendingReply<double>\0day\0month\0"
    "year\0utime\0Day_of_Week\0Gauquelin\0"
    "geolat\0GetEclipseValue\0GetHousePos\0"
    "slot\0GetMagnitude\0GetObliquity\0"
    "GetRiseSet\0ca\0GetSunStep\0GetValues\0"
    "GetVersion\0IfParts\0QDBusPendingReply<bool>\0"
    "InitRestricts\0QDBusPendingReply<>\0art\0"
    "Kill\0LoadParts\0dbv\0size\0Local2Mean\0j\0"
    "LunarOccult\0local\0Recompute\0dct\0ScanAsp\0"
    "Q_NOREPLY\0origjd\0scserver\0dual\0mp\0"
    "tosecond\0ap\0ScanDir\0first\0second\0house\0"
    "dirtype\0statkey\0dval\0SetExtraData\0utc\0"
    "swepaths\0temp\0press\0humid\0nbstars\0eit\0"
    "sti\0SetRestrict\0SetXPoint\0angle\0dist\0"
    "ring\0SidTime\0StopScan"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_OrgSkylendarSkyserviceInterface[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      36,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    2,  194,    3, 0x0a /* Public */,
       6,    4,  199,    3, 0x0a /* Public */,
       9,    6,  208,    3, 0x0a /* Public */,
      13,    4,  221,    3, 0x0a /* Public */,
      18,    4,  230,    3, 0x0a /* Public */,
      19,    3,  239,    3, 0x0a /* Public */,
      23,    4,  246,    3, 0x0a /* Public */,
      26,    0,  255,    3, 0x0a /* Public */,
      28,    1,  256,    3, 0x0a /* Public */,
      30,    4,  259,    3, 0x0a /* Public */,
      34,    2,  268,    3, 0x0a /* Public */,
      36,    5,  273,    3, 0x0a /* Public */,
      42,    1,  284,    3, 0x0a /* Public */,
      43,    4,  287,    3, 0x0a /* Public */,
      45,    1,  296,    3, 0x0a /* Public */,
      46,    1,  299,    3, 0x0a /* Public */,
      48,    1,  302,    3, 0x0a /* Public */,
      49,    1,  305,    3, 0x0a /* Public */,
      50,    6,  308,    3, 0x0a /* Public */,
      52,    1,  321,    3, 0x0a /* Public */,
      53,    1,  324,    3, 0x0a /* Public */,
      54,    0,  327,    3, 0x0a /* Public */,
      55,    0,  328,    3, 0x0a /* Public */,
      57,    1,  329,    3, 0x0a /* Public */,
      60,    0,  332,    3, 0x0a /* Public */,
      61,    2,  333,    3, 0x0a /* Public */,
      64,    1,  338,    3, 0x0a /* Public */,
      66,    8,  341,    3, 0x0a /* Public */,
      68,    1,  358,    3, 0x0a /* Public */,
      70,    7,  361,   71, 0x0a /* Public */,
      78,    8,  376,   71, 0x0a /* Public */,
      85,    8,  393,    3, 0x0a /* Public */,
      94,    2,  410,    3, 0x0a /* Public */,
      95,    4,  415,    3, 0x0a /* Public */,
      99,    1,  424,    3, 0x0a /* Public */,
     100,    0,  427,   71, 0x0a /* Public */,

 // slots: parameters
    0x80000000 | 2, QMetaType::Double, QMetaType::Int,    4,    5,
    0x80000000 | 2, QMetaType::Double, QMetaType::Int, QMetaType::Bool, QMetaType::Bool,    4,    5,    7,    8,
    0x80000000 | 2, QMetaType::Double, QMetaType::Int, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Bool,    4,    5,   10,   11,   12,    7,
    0x80000000 | 14, QMetaType::Double, QMetaType::Int, QMetaType::QByteArray, QMetaType::QByteArray,   15,    5,   16,   17,
    0x80000000 | 14, QMetaType::Double, QMetaType::Int, QMetaType::QByteArray, QMetaType::QByteArray,   15,    5,   16,   17,
    0x80000000 | 14, QMetaType::Double, QMetaType::Double, QMetaType::Double,   20,   21,   22,
    0x80000000 | 14, QMetaType::Double, QMetaType::Int, QMetaType::Int, QMetaType::Int,    4,   24,    5,   25,
    0x80000000 | 27,
    0x80000000 | 27, QMetaType::Int,   29,
    0x80000000 | 14, QMetaType::Double, QMetaType::QByteArray, QMetaType::Int, QMetaType::Int,   31,   16,   32,   33,
    0x80000000 | 14, QMetaType::Double, QMetaType::Bool,   15,   35,
    0x80000000 | 37, QMetaType::UChar, QMetaType::UChar, QMetaType::Short, QMetaType::Double, QMetaType::Bool,   38,   39,   40,   41,   35,
    0x80000000 | 2, QMetaType::Double,   15,
    0x80000000 | 37, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Double,    4,   44,   10,   11,
    0x80000000 | 37, QMetaType::Int,   29,
    0x80000000 | 14, QMetaType::Int,   47,
    0x80000000 | 37, QMetaType::Int,   29,
    0x80000000 | 37, QMetaType::Double,    4,
    0x80000000 | 37, QMetaType::Double, QMetaType::Int, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Int,    4,   24,   10,   11,   12,   51,
    0x80000000 | 37, QMetaType::Double,   15,
    0x80000000 | 14, QMetaType::Int,   47,
    0x80000000 | 37,
    0x80000000 | 56,
    0x80000000 | 58, QMetaType::QByteArray,   59,
    0x80000000 | 58,
    0x80000000 | 56, QMetaType::QByteArray, QMetaType::Int,   62,   63,
    0x80000000 | 37, QMetaType::Double,   65,
    0x80000000 | 2, QMetaType::Double, QMetaType::Int, QMetaType::Int, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Bool, QMetaType::Bool,    4,   29,    5,   10,   11,   12,    7,   67,
    0x80000000 | 56, QMetaType::QByteArray,   69,
    QMetaType::Void, QMetaType::QByteArray, QMetaType::Double, QMetaType::QString, QMetaType::Bool, QMetaType::Bool, QMetaType::Bool, QMetaType::Bool,   69,   72,   73,   74,   75,   76,   77,
    QMetaType::Void, QMetaType::Int, QMetaType::Int, QMetaType::QString, QMetaType::UChar, QMetaType::UChar, QMetaType::UChar, QMetaType::Double, QMetaType::Int,   79,   80,   73,   81,   82,   83,   84,    5,
    0x80000000 | 58, QMetaType::Bool, QMetaType::QString, QMetaType::Double, QMetaType::Double, QMetaType::UChar, QMetaType::Int, QMetaType::QByteArray, QMetaType::QByteArray,   86,   87,   88,   89,   90,   91,   92,   93,
    0x80000000 | 58, QMetaType::QByteArray, QMetaType::Int,   59,   29,
    0x80000000 | 58, QMetaType::Double, QMetaType::Double, QMetaType::Double, QMetaType::Int,   96,   21,   97,   98,
    0x80000000 | 37, QMetaType::Double,   15,
    QMetaType::Void,

       0        // eod
};

void OrgSkylendarSkyserviceInterface::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        OrgSkylendarSkyserviceInterface *_t = static_cast<OrgSkylendarSkyserviceInterface *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: { QDBusPendingReply<int> _r = _t->ComputeEclPos((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<int>*>(_a[0]) = _r; }  break;
        case 1: { QDBusPendingReply<int> _r = _t->ComputeGlobEclipse((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< bool(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<int>*>(_a[0]) = _r; }  break;
        case 2: { QDBusPendingReply<int> _r = _t->ComputeLocEclipse((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< double(*)>(_a[5])),(*reinterpret_cast< bool(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<int>*>(_a[0]) = _r; }  break;
        case 3: { QDBusPendingReply<QByteArray> _r = _t->DBusAzalt((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QByteArray(*)>(_a[3])),(*reinterpret_cast< const QByteArray(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 4: { QDBusPendingReply<QByteArray> _r = _t->DBusAzaltP((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QByteArray(*)>(_a[3])),(*reinterpret_cast< const QByteArray(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 5: { QDBusPendingReply<QByteArray> _r = _t->DBusConvert((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 6: { QDBusPendingReply<QByteArray> _r = _t->DBusGetApsides((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 7: { QDBusPendingReply<QString> _r = _t->DBusGetError();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = _r; }  break;
        case 8: { QDBusPendingReply<QString> _r = _t->DBusGetPlaName((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QString>*>(_a[0]) = _r; }  break;
        case 9: { QDBusPendingReply<QByteArray> _r = _t->DBusHeliacal((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< const QByteArray(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 10: { QDBusPendingReply<QByteArray> _r = _t->DBusRevJul((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 11: { QDBusPendingReply<double> _r = _t->Date_Conversion((*reinterpret_cast< uchar(*)>(_a[1])),(*reinterpret_cast< uchar(*)>(_a[2])),(*reinterpret_cast< short(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< bool(*)>(_a[5])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 12: { QDBusPendingReply<int> _r = _t->Day_of_Week((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<int>*>(_a[0]) = _r; }  break;
        case 13: { QDBusPendingReply<double> _r = _t->Gauquelin((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 14: { QDBusPendingReply<double> _r = _t->GetEclipseValue((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 15: { QDBusPendingReply<QByteArray> _r = _t->GetHousePos((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 16: { QDBusPendingReply<double> _r = _t->GetMagnitude((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 17: { QDBusPendingReply<double> _r = _t->GetObliquity((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 18: { QDBusPendingReply<double> _r = _t->GetRiseSet((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< double(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 19: { QDBusPendingReply<double> _r = _t->GetSunStep((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 20: { QDBusPendingReply<QByteArray> _r = _t->GetValues((*reinterpret_cast< int(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<QByteArray>*>(_a[0]) = _r; }  break;
        case 21: { QDBusPendingReply<double> _r = _t->GetVersion();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 22: { QDBusPendingReply<bool> _r = _t->IfParts();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = _r; }  break;
        case 23: { QDBusPendingReply<> _r = _t->InitRestricts((*reinterpret_cast< const QByteArray(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = _r; }  break;
        case 24: { QDBusPendingReply<> _r = _t->Kill();
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = _r; }  break;
        case 25: { QDBusPendingReply<bool> _r = _t->LoadParts((*reinterpret_cast< const QByteArray(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = _r; }  break;
        case 26: { QDBusPendingReply<double> _r = _t->Local2Mean((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 27: { QDBusPendingReply<int> _r = _t->LunarOccult((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< int(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< double(*)>(_a[5])),(*reinterpret_cast< double(*)>(_a[6])),(*reinterpret_cast< bool(*)>(_a[7])),(*reinterpret_cast< bool(*)>(_a[8])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<int>*>(_a[0]) = _r; }  break;
        case 28: { QDBusPendingReply<bool> _r = _t->Recompute((*reinterpret_cast< const QByteArray(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<bool>*>(_a[0]) = _r; }  break;
        case 29: _t->ScanAsp((*reinterpret_cast< const QByteArray(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< bool(*)>(_a[4])),(*reinterpret_cast< bool(*)>(_a[5])),(*reinterpret_cast< bool(*)>(_a[6])),(*reinterpret_cast< bool(*)>(_a[7]))); break;
        case 30: _t->ScanDir((*reinterpret_cast< int(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3])),(*reinterpret_cast< uchar(*)>(_a[4])),(*reinterpret_cast< uchar(*)>(_a[5])),(*reinterpret_cast< uchar(*)>(_a[6])),(*reinterpret_cast< double(*)>(_a[7])),(*reinterpret_cast< int(*)>(_a[8]))); break;
        case 31: { QDBusPendingReply<> _r = _t->SetExtraData((*reinterpret_cast< bool(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< double(*)>(_a[4])),(*reinterpret_cast< uchar(*)>(_a[5])),(*reinterpret_cast< int(*)>(_a[6])),(*reinterpret_cast< const QByteArray(*)>(_a[7])),(*reinterpret_cast< const QByteArray(*)>(_a[8])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = _r; }  break;
        case 32: { QDBusPendingReply<> _r = _t->SetRestrict((*reinterpret_cast< const QByteArray(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = _r; }  break;
        case 33: { QDBusPendingReply<> _r = _t->SetXPoint((*reinterpret_cast< double(*)>(_a[1])),(*reinterpret_cast< double(*)>(_a[2])),(*reinterpret_cast< double(*)>(_a[3])),(*reinterpret_cast< int(*)>(_a[4])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<>*>(_a[0]) = _r; }  break;
        case 34: { QDBusPendingReply<double> _r = _t->SidTime((*reinterpret_cast< double(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QDBusPendingReply<double>*>(_a[0]) = _r; }  break;
        case 35: _t->StopScan(); break;
        default: ;
        }
    }
}

const QMetaObject OrgSkylendarSkyserviceInterface::staticMetaObject = {
    { &QDBusAbstractInterface::staticMetaObject, qt_meta_stringdata_OrgSkylendarSkyserviceInterface.data,
      qt_meta_data_OrgSkylendarSkyserviceInterface,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *OrgSkylendarSkyserviceInterface::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *OrgSkylendarSkyserviceInterface::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_OrgSkylendarSkyserviceInterface.stringdata0))
        return static_cast<void*>(const_cast< OrgSkylendarSkyserviceInterface*>(this));
    return QDBusAbstractInterface::qt_metacast(_clname);
}

int OrgSkylendarSkyserviceInterface::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractInterface::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 36)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 36;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 36)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 36;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
