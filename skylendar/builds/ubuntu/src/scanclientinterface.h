/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -p scanclientinterface /skylendar/builds/ubuntu/src/scanclient.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SCANCLIENTINTERFACE_H
#define SCANCLIENTINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.skylendar.scanclient
 */
class OrgSkylendarScanclientInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.skylendar.scanclient"; }

public:
    OrgSkylendarScanclientInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgSkylendarScanclientInterface();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void EndScan()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("EndScan"), argumentList);
    }

    inline Q_NOREPLY void GetAspect(int i, double ipos, int j, double jpos, int aspect, double date)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i) << QVariant::fromValue(ipos) << QVariant::fromValue(j) << QVariant::fromValue(jpos) << QVariant::fromValue(aspect) << QVariant::fromValue(date);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("GetAspect"), argumentList);
    }

    inline Q_NOREPLY void GetAspect(int i, double ipos, int j, double jpos, int aspect, double date, bool ap)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i) << QVariant::fromValue(ipos) << QVariant::fromValue(j) << QVariant::fromValue(jpos) << QVariant::fromValue(aspect) << QVariant::fromValue(date) << QVariant::fromValue(ap);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("GetAspect"), argumentList);
    }

    inline Q_NOREPLY void GetDirection(int i, double ipos, int j, double jpos, int aspect, double date, bool converse)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i) << QVariant::fromValue(ipos) << QVariant::fromValue(j) << QVariant::fromValue(jpos) << QVariant::fromValue(aspect) << QVariant::fromValue(date) << QVariant::fromValue(converse);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("GetDirection"), argumentList);
    }

    inline Q_NOREPLY void GetMPAspect(int i, int j, double pos, int k, double kpos, int aspect, double date)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i) << QVariant::fromValue(j) << QVariant::fromValue(pos) << QVariant::fromValue(k) << QVariant::fromValue(kpos) << QVariant::fromValue(aspect) << QVariant::fromValue(date);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("GetMPAspect"), argumentList);
    }

    inline Q_NOREPLY void GetRetro(int i, double ipos, double date)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i) << QVariant::fromValue(ipos) << QVariant::fromValue(date);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("GetRetro"), argumentList);
    }

    inline Q_NOREPLY void GetSignTrans(int i, int sign, double date)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i) << QVariant::fromValue(sign) << QVariant::fromValue(date);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("GetSignTrans"), argumentList);
    }

    inline Q_NOREPLY void Progress(int i)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(i);
        callWithArgumentList(QDBus::NoBlock, QStringLiteral("Progress"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace skylendar {
    typedef ::OrgSkylendarScanclientInterface scanclient;
  }
}
#endif
